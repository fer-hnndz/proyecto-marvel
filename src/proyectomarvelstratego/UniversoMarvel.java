/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectomarvelstratego;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jorge Hernandez
 */
public class UniversoMarvel extends javax.swing.JFrame {

    /**
     * Creates new form UniversoMarvel
     */
    
    SistemaUsuarios sistemaUsuarios;
    Stats stats;
    public UniversoMarvel(SistemaUsuarios sistemaUsuarios, Stats stats) {
        this.sistemaUsuarios = sistemaUsuarios;
        this.stats = stats;
        initComponents();
        cargarRankings();
        
        activeLabel.setText("Usuarios Activos: " + sistemaUsuarios.usuariosActivos.toArray().length);
        historicLabel.setText("Usuarios Historicos: " + sistemaUsuarios.usuariosHistoricos);
        matchesLabel.setText("Partidas Jugadas: " + Stats.getPartidasJugadas());
        heroesLabel.setText("Victorias Heroes: " + Stats.getVictoriasHeroes());
        villainLabel.setText("Victorias Villanos: " + Stats.getVictoriasVillanos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        activeLabel = new javax.swing.JLabel();
        historicLabel = new javax.swing.JLabel();
        heroesLabel = new javax.swing.JLabel();
        matchesLabel = new javax.swing.JLabel();
        villainLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankingTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Universo Marvel");
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("RANKING");

        activeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        activeLabel.setText("Usuarios Activos");

        historicLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        historicLabel.setText("Usuarios Historicos");

        heroesLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        heroesLabel.setText("Victorias Heroes");

        matchesLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchesLabel.setText("Partidas Jugadas");

        villainLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        villainLabel.setText("Victorias Villanos");

        rankingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posicion", "Usuario", "Puntos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rankingTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(rankingTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("UNIVERSO MARVEL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(villainLabel)
                            .addComponent(activeLabel)
                            .addComponent(historicLabel)
                            .addComponent(matchesLabel)
                            .addComponent(heroesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(activeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(historicLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matchesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(heroesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(villainLabel))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void printUsuarios(Usuario[] usuarios) {
        for (Usuario user:usuarios) {
            System.out.println(user.getUsuario() + ": " + user.getPuntos());
        }
    }
    
    void cargarRankings() {
        Usuario[] usuarios = sistemaUsuarios.getUsuariosActivos();
        printUsuarios(usuarios);
        usuarios = ordernarUsuario(usuarios);
        System.out.println("===ORDENADOS===");
        printUsuarios(usuarios);
        
        DefaultTableModel model = (DefaultTableModel) rankingTable.getModel();
        for (int i = 0; i<usuarios.length;i++) {
            Usuario user = usuarios[i];
            model.addRow(new Object[]{i+1, user.getUsuario(), user.getPuntos()});
        }
        
    }
    
    /**
     * Ordena los usuarios de mayor a menor en base a sus puntos
     * @return 
     */
    Usuario[] ordernarUsuario(Usuario[] usuarios) {
        Usuario usuariosOrdenados[] = Arrays.copyOf(usuarios, usuarios.length);
        // Usar bubble sort para ordenar los usuarios en base a su puntuacion
        
        // EL ARRAY ESTA ORDENADO PORQUE SOLO TIENE UN USUARIO
        if (usuarios.length == 1) return usuarios;
        
        for (int i =0;i<usuariosOrdenados.length-1;i++){
        /*
            if (i== usuarios.length -1) {
                if (usuarios[i].getPuntos() < usuarios[i-1].getPuntos()) {
                    Usuario usuarioMayor = usuarios[i-1];
                    Usuario usuarioMenor = usuarios[i];
                    usuarios[i] = usuarioMayor;
                    usuarios[i-1] = usuarioMenor;
                    continue;
                }
            }
         */
            
        
            Usuario L = usuarios[i];
            Usuario R = usuarios[i+1];
            if (L.getPuntos()<R.getPuntos()) {
                usuarios[i + 1] = L;
                usuarios[i] = R;
            }
        }
        
        return usuarios;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeLabel;
    private javax.swing.JLabel heroesLabel;
    private javax.swing.JLabel historicLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel matchesLabel;
    private javax.swing.JTable rankingTable;
    private javax.swing.JLabel villainLabel;
    // End of variables declaration//GEN-END:variables
}
